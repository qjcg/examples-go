VERSION 0.8

ARG --global nats_box = natsio/nats-box:0.14.3
ARG --global alpine = alpine:3
ARG --global ubuntu = ubuntu:noble
ARG --global img_golang = golang:1.22-alpine

test-base:
	FROM $img_golang
	RUN apk add --no-cache bash curl jq tmux
	ENV CGO_ENABLED=0
	LET flags = -ldflags='-s'
	LET v_nats = 3f6d70ab5c7c079a2ce3606b155fcc5a4e65925f
	LET v_nk = v0.4.7
	LET v_nsc = 1989e956430d7f8dbfdb58504e013d1818bf994a
	LET v_nats_server = v2.10.17
	RUN go install $flags github.com/nats-io/natscli/nats@$v_nats
	RUN go install $flags github.com/nats-io/nkeys/nk@$v_nk
	RUN go install $flags github.com/nats-io/nsc/v2@$v_nsc
	RUN go install $flags github.com/nats-io/nats-server/v2@$v_nats_server
	RUN echo 'export PATH=/go/bin:/usr/local/go/bin:$PATH' >> ~/.bash_profile
	WORKDIR /work
	SAVE ARTIFACT /go/bin/*

# TODO: Create `testdata-keys` target that provides
#   - 1x operator with preferred settings
#   - 1x system account and user
#   - 2x accounts with preferred settings
#   - 3x users in each account with preferred settings
testdata:
	FROM +test-base

	ARG operator = foocorp
	ARG server_url = nats://127.0.0.1:4222
	ARG account1 = team_alfa
	ARG account2 = team_bravo
	ARG a1_user1 = foo
	ARG a1_user2 = bar
	ARG a1_user3 = baz
	ARG a2_user1 = foo
	ARG a2_user2 = bar
	ARG a2_user3 = baz

	# Create an Operator.
	RUN nsc create operator $operator \
	    --generate-signing-key \
	    --sys
	RUN nsc edit operator \
	    --account-jwt-server-url $server_url \
	    --require-signing-keys \
	    --tag status:awesome,region:us-east

	# Get the Operator's signing-key.
	LET operator_sk = $(nsc describe operator $operator --json | jq -r '.nats.signing_keys[0]')

	# Create Account1 using the Operator's signing-key.
	# Add metadata and configuration settings to the Account.
	RUN nsc create account $account1 -K $operator_sk
	RUN nsc edit account $account1 \
	    --description "The $account1 Team at $operator" \
	    --info-url "https://$operator.com/$account1" \
	    --data 5G \
	    --expiry 1y \
	    --js-disk-storage 50G \
	    --js-mem-storage 2G \
	    --js-tier 3 \
	    --tag status:awesome,az:us-east

	# Create Account2 using the Operator's signing-key.
	# Add metadata and configuration settings to the Account.
	RUN nsc create account $account2 -K $operator_sk
	RUN nsc edit account $account2 \
	    --description "The $account2 Team at $operator" \
	    --info-url "https://$operator.com/$account2" \
	    --data 5G \
	    --expiry 1y \
	    --js-disk-storage 50G \
	    --js-mem-storage 2G \
	    --js-tier 3 \
	    --tag status:awesome,az:us-east

	# Create a signing-key for Account1.
	# Add a role name and permissions to the signing-key.
	RUN nsc edit account -n $account1 --sk generate
	LET account1_sk = $(nsc describe account $account1 --json | jq -r '.nats.signing_keys[0]')
	RUN nsc edit signing-key \
	    --account $account1 \
	    --sk $account1_sk \
	    --data 4G \
	    --conn-type STANDARD,WEBSOCKET \
	    --role chat_user \
	    --allow-pub "chat.post.{{tag(org)}}.{{name()}}" \
	    --allow-sub "chat.post.{{tag(org)}}.*" \
	    --allow-pubsub 'greetings.>' \
	    --allow-pub-response

	# Create a signing-key for Account2.
	# Add a role name and permissions to the signing-key.
	RUN nsc edit account -n $account2 --sk generate
	LET account2_sk = $(nsc describe account $account2 --json | jq -r '.nats.signing_keys[0]')
	RUN nsc edit signing-key \
	    --account $account2 \
	    --sk $account2_sk \
	    --data 4G \
	    --conn-type STANDARD,WEBSOCKET \
	    --role chat_user \
	    --allow-pub "chat.post.{{tag(org)}}.{{name()}}" \
	    --allow-sub "chat.post.{{tag(org)}}.*" \
	    --allow-pubsub 'greetings.>' \
	    --allow-pub-response

	# Create Account1 Users using scoped signing-key.
 	RUN nsc create user $a1_user1 --account $account1 --private-key $account1_sk
 	RUN nsc create user $a1_user2 --account $account1 --private-key $account1_sk
 	RUN nsc create user $a1_user3 --account $account1 --private-key $account1_sk

	# Create Account2 Users using scoped signing-key.
 	RUN nsc create user $a2_user1 --account $account2 --private-key $account2_sk
 	RUN nsc create user $a2_user2 --account $account2 --private-key $account2_sk
 	RUN nsc create user $a2_user3 --account $account2 --private-key $account2_sk

	# Generate nats-server resolver config file.
	RUN nsc generate config --nats-resolver --config-file resolver.conf

	# Export all nkeys and JWTs.
	RUN nsc export keys --all --dir exports --include-jwts

	SAVE ARTIFACT exports AS LOCAL testdata/exports
	SAVE ARTIFACT resolver.conf AS LOCAL testdata/resolver.conf

dev:
	FROM +testdata
	RUN --interactive /bin/bash --login

clean:
	LOCALLY
	RUN rm -rf testdata

CREATE_OPERATOR:
	FUNCTION
	ARG name = foocorp
	ARG url = nats://127.0.0.1:4222
	ARG tags = status:awesome,region:us-east

	RUN nsc create operator $name \
	    --generate-signing-key \
	    --sys
	RUN nsc edit operator \
	    --account-jwt-server-url $url \
	    --require-signing-keys \
	    --tag $tags

CREATE_ACCOUNT:
	FUNCTION
	ARG operator = foocorp
	ARG account = team_alfa

	LET operator_sk = $(nsc describe operator $operator --json | jq -r '.nats.signing_keys[0]')
	RUN nsc create account $account -K $operator_sk

CREATE_ACCOUNT_SK:
	FUNCTION
	ARG account = team_alfa
	ARG sk_args = --role chat_user --allow-pub "chat.post.{{tag(org)}}.{{name()}}" --allow-sub "chat.post.{{tag(org)}}.*" --allow-pub-response

	RUN nsc edit account -n $account --sk generate
	LET sk = $(nsc describe account $account --json | jq -r '.nats.signing_keys[0]')
	RUN nsc edit signing-key --sk $sk $sk_args

EDIT_ACCOUNT:
	FUNCTION
	ARG account = team_alfa
	ARG args = --description 'The dev. team at FooCorp' --info-url 'https://foocorp.com/$account'

	# FIXME: can't pass args as $args, though explicitly passing them below works.
	RUN nsc edit account $account --description 'The dev. team at FooCorp' --info-url 'https://foocorp.com/$account'

GENERATE_CREDS:
	FUNCTION
	ARG account = SYS
	ARG user = sys

	RUN nsc generate creds --account $account --name $user --output-file $user.creds
	SAVE ARTIFACT $user.creds

GENERATE_CONFIG:
	FUNCTION
	ARG filename = resolver.conf

	RUN nsc generate config --nats-resolver --config-file $filename
	SAVE ARTIFACT $filename

# list lists all operators and keys for a given operator.
LIST:
	FUNCTION

	RUN nsc list operators
	RUN nsc list keys --all

EXPORT:
	FUNCTION
	ARG dir = exports

	RUN nsc export keys --all --dir $dir --include-jwts
	SAVE ARTIFACT $dir

IMPORT:
	FUNCTION
	ARG dir = imports

	COPY --dir $dir .
	RUN nsc add operator --url ./$dir/O*.jwt
	RUN for a in ./$dir/A*.jwt ; do nsc import account --file $a ; done
	RUN for u in ./$dir/U*.jwt ; do nsc import user --file $u ; done
	RUN nsc import keys --dir $dir

REPORT:
	FUNCTION

	LET out = report.md

	RUN echo 'nsc list keys --all' >> $out
	RUN nsc list keys --all >> $out 2>&1
	RUN echo 'nsc describe operator' >> $out
	RUN nsc describe operator >> $out 2>&1
	RUN echo 'nsc describe account --name SYS' >> $out
	RUN nsc describe account --name SYS >> $out 2>&1

	SAVE ARTIFACT $out

TEST_SCOPED_SIGNING_KEY:
	FUNCTION

	ARG OPERATOR = foocorp
	ARG ACCOUNT = devteam
	ARG USER1 = bob
	ARG USER2 = alice

	# Create a new Operator and Account.
	DO +CREATE_OPERATOR --NAME=$OPERATOR
	DO +CREATE_ACCOUNT --NAME=$ACCOUNT

	# Add a signing key to the Account.
	RUN nsc edit account -n $ACCOUNT --sk generate
	LET sk1 = $(nsc describe account -n $ACCOUNT -J | jq -r '.nats.signing_keys[0]')

	# Give the signing key a role name and set some permissions on it.
	RUN nsc edit signing-key \
	    	--sk $sk1 \
		--role chat_user \
	    	--allow-pub "chat.post.{{tag(org)}}.{{name()}}" \
	        --allow-sub "chat.post.{{tag(org)}}.*" \
		--allow-pub-response

	# Create Users using the signing key.
	DO +CREATE_USER --NAME=$USER1 --KEY=$sk1
	DO +CREATE_USER --NAME=$USER2 --KEY=$sk1

	# Read permissions set on a User.
	RUN nsc describe user $USER1

	# Update permissions on a signing key.
	# After pushing this key to nats-server, permissions will be updated for all Users signed with this key.
	# No need to distribute any new keys to Users!
	RUN nsc edit signing-key \
	    --sk $sk1 \
	    --allow-pub "chat.dm.{{tag(org)}}.{{name()}}.*" \
	    --allow-sub "chat.dm.{{tag(org)}}.*.{{name()}}"

import-alpine:
	FROM $alpine
	ARG export_dir = exports
	WORKDIR /work
	COPY +test-base/nsc /usr/local/bin
	COPY --dir +test-export-keys-and-jwts/$export_dir .
	RUN nsc add operator --url ./$export_dir/O*.jwt
	RUN for a in ./$export_dir/A*.jwt ; do nsc import account --file $a ; done
	RUN for u in ./$export_dir/U*.jwt ; do nsc import user --file $u ; done
	RUN nsc import keys --dir ./$export_dir

	RUN --interactive /bin/sh --login

import-ubuntu:
	FROM $ubuntu
	ARG export_dir = exports
	WORKDIR /work
	COPY +test-base/nsc /usr/local/bin
	COPY --dir +test-export-keys-and-jwts/$export_dir .
	RUN nsc add operator --url ./$export_dir/O*.jwt
	RUN for a in ./$export_dir/A*.jwt ; do nsc import account --file $a ; done
	RUN for u in ./$export_dir/U*.jwt ; do nsc import user --file $u ; done
	RUN nsc import keys --dir ./$export_dir

	RUN --interactive /bin/bash --login

# TODO: Extract generate creds logic and delete.
test-create-user-from-signing-key-with-limits-integration:
	FROM +test-create-user-from-signing-key-with-limits
	LET export_dir = exports
	ARG export_dir_local = exports/create-user-from-signing-key-with-limits-integration
	LET resolver_config_file = resolver.conf
	ARG account = devteam
	ARG user = xanadu
	RUN nsc export keys --all --include-jwts --dir $export_dir
	RUN nsc generate creds -a $account -n $user -o $user.creds
	RUN nsc generate config --nats-resolver --config-file $resolver_config_file
	RUN nats context save $user --creds ./$user.creds --select
	SAVE ARTIFACT $export_dir AS LOCAL $export_dir_local
	SAVE ARTIFACT $user.creds AS LOCAL $export_dir_local
	SAVE ARTIFACT $resolver_config_file AS LOCAL $export_dir_local
	SAVE IMAGE qjcg/nats-integration:latest
